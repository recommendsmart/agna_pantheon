<?php

namespace Drupal\d_commerce_product\Entity;

use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_product\Entity\ProductVariationTypeInterface;
use Drupal\Component\Plugin\Exception\PluginException;
use Drupal\Core\Logger\LoggerChannelTrait;

/**
 * Provides an override for commerce_product product variation entity class.
 *
 * @package Drupal\d_commerce_product\Entity
 */
class DrooplerProductVariation extends ProductVariation {

  use LoggerChannelTrait;

  /**
   * {@inheritdoc}
   */
  public function label(): string {
    return $this->shouldGenerateTitle() ? parent::label() : $this->createVariationLabel();
  }

  /**
   * {@inheritdoc}
   */
  public function getTitle() {
    return $this->shouldGenerateTitle() ? parent::getTitle() : $this->createVariationLabel();
  }

  /**
   * Returns whether product variation should use autogenerated title.
   *
   * @return bool
   *   Should product variation use autogenerated title.
   */
  public function shouldGenerateTitle(): bool {
    $variation_type = $this->getVariationType();

    return $variation_type && $variation_type->shouldGenerateTitle();
  }

  /**
   * Returns variation type of current product variation.
   *
   * @return \Drupal\commerce_product\Entity\ProductVariationTypeInterface|null
   *   Product variation type.
   */
  protected function getVariationType(): ?ProductVariationTypeInterface {
    try {
      $variationType = $this->entityTypeManager()
        ->getStorage('commerce_product_variation_type')
        ->load($this->bundle());
    }
    catch (PluginException $e) {
      $this->getLogger('d_commerce_product')->error($e->getMessage());
      $variationType = NULL;
    }

    return $variationType;
  }

  /**
   * Creates variation label based on product and variation name.
   *
   * @return string
   *   Product variation label.
   */
  protected function createVariationLabel(): string {
    return $this->getProduct()->getTitle() . ' ' . parent::label();
  }

}
