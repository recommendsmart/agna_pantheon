--- tests/src/Kernel/EntityAccessComplexTest.php
+++ tests/src/Kernel/EntityAccessComplexTest.php
@@ -628,7 +628,7 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testMemberUpdateAnyAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
     $node_3 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getMemberRole()->grantPermission('update any node_as_content:page entity')->save();
@@ -644,18 +644,18 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
     $group_b->addMember($this->getCurrentUser());
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Members can update any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Members can update any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Members can update any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Members can update any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($account);
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Members can update any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Members can update any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Members can update any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Members can update any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Non-members cannot update grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Non-members cannot update grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Non-members cannot update published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Non-members cannot update unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
   }
 
@@ -665,7 +665,7 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testNonMemberUpdateAnyAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
     $node_3 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getOutsiderRole()->grantPermission('update any node_as_content:page entity')->save();
@@ -679,18 +679,18 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
     $group_b->addContent($node_2, 'node_as_content:page');
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Non-members can update any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Non-members can update any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Non-members can update any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Non-members can update any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Non-members can update any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Non-members can update any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Non-members can update any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Non-members can update any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($account);
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
   }
 
@@ -700,35 +700,45 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testMemberUpdateOwnAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
-    $node_3 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
+    $node_3 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
+    $node_4 = $this->createNode(['type' => 'page', 'uid' => $account->id(), 'status' => 0]);
+    $node_5 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getMemberRole()->grantPermission('update own node_as_content:page entity')->save();
     $this->groupTypeB->getMemberRole()->grantPermission('update own node_as_content:page entity')->save();
 
     $group_a = $this->createGroup(['type' => $this->groupTypeA->id()]);
     $group_a->addContent($node_1, 'node_as_content:page');
+    $group_a->addContent($node_2, 'node_as_content:page');
     $group_a->addMember($this->getCurrentUser());
     $group_a->addMember($account);
 
     $group_b = $this->createGroup(['type' => $this->groupTypeB->id()]);
-    $group_b->addContent($node_2, 'node_as_content:page');
+    $group_b->addContent($node_3, 'node_as_content:page');
+    $group_b->addContent($node_4, 'node_as_content:page');
     $group_b->addMember($this->getCurrentUser());
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Members can update their own grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Members can update their own published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Members can update their own unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'update'), 'Members cannot update published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'update'), 'Members cannot update unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($account);
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Members can update their own grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'Members can update their own published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_4, 'update'), 'Members can update their own unpublished grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'update'), 'Members cannot update published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'update'), 'Members cannot update unpublished grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'update'), 'The ungrouped node can be updated.');
   }
 
   /**
@@ -737,33 +747,43 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testNonMemberUpdateOwnAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
-    $node_3 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
+    $node_3 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
+    $node_4 = $this->createNode(['type' => 'page', 'uid' => $account->id(), 'status' => 0]);
+    $node_5 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getOutsiderRole()->grantPermission('update own node_as_content:page entity')->save();
     $this->groupTypeB->getOutsiderRole()->grantPermission('update own node_as_content:page entity')->save();
 
     $group_a = $this->createGroup(['type' => $this->groupTypeA->id()]);
     $group_a->addContent($node_1, 'node_as_content:page');
+    $group_a->addContent($node_2, 'node_as_content:page');
     $group_a->addMember($account);
 
     $group_b = $this->createGroup(['type' => $this->groupTypeB->id()]);
-    $group_b->addContent($node_2, 'node_as_content:page');
+    $group_b->addContent($node_3, 'node_as_content:page');
+    $group_b->addContent($node_4, 'node_as_content:page');
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Non-members can update their own grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Non-members cannot update grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'update'), 'Non-members can update their own published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'update'), 'Non-members can update their own unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'update'), 'Non-members cannot update published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'update'), 'Non-members cannot update unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Non-members cannot update grouped nodes they do not own.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Non-members cannot update grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Non-members cannot update published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Non-members cannot update unpublished grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'update'), 'Non-members cannot update published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'update'), 'Non-members cannot update unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'update'), 'The ungrouped node can be updated.');
 
     $this->setCurrentUser($account);
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'update'), 'The ungrouped node can be updated.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'update'), 'Members cannot update published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'update'), 'Members cannot update unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'update'), 'Members cannot update published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'update'), 'Members cannot update unpublished grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'update'), 'The ungrouped node can be updated.');
   }
   
   /**
@@ -772,7 +792,7 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testMemberDeleteAnyAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 1]);
     $node_3 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getMemberRole()->grantPermission('delete any node_as_content:page entity')->save();
@@ -788,18 +808,18 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
     $group_b->addMember($this->getCurrentUser());
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Members can delete any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Members can delete any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Members can delete any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Members can delete any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($account);
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Members can delete any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Members can delete any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Members can delete any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Members can delete any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Non-members cannot delete grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Non-members cannot delete grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Non-members cannot delete published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Non-members cannot delete unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
   }
 
@@ -809,7 +829,7 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testNonMemberDeleteAnyAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
     $node_3 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getOutsiderRole()->grantPermission('delete any node_as_content:page entity')->save();
@@ -823,18 +843,18 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
     $group_b->addContent($node_2, 'node_as_content:page');
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Non-members can delete any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Non-members can delete any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Non-members can delete any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Non-members can delete any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Non-members can delete any grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Non-members can delete any grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Non-members can delete any published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Non-members can delete any unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($account);
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete unpublished grouped nodes.');
     $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
   }
 
@@ -844,35 +864,45 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testMemberDeleteOwnAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
-    $node_3 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
+    $node_3 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
+    $node_4 = $this->createNode(['type' => 'page', 'uid' => $account->id(), 'status' => 0]);
+    $node_5 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getMemberRole()->grantPermission('delete own node_as_content:page entity')->save();
     $this->groupTypeB->getMemberRole()->grantPermission('delete own node_as_content:page entity')->save();
 
     $group_a = $this->createGroup(['type' => $this->groupTypeA->id()]);
     $group_a->addContent($node_1, 'node_as_content:page');
+    $group_a->addContent($node_2, 'node_as_content:page');
     $group_a->addMember($this->getCurrentUser());
     $group_a->addMember($account);
 
     $group_b = $this->createGroup(['type' => $this->groupTypeB->id()]);
-    $group_b->addContent($node_2, 'node_as_content:page');
+    $group_b->addContent($node_3, 'node_as_content:page');
+    $group_b->addContent($node_4, 'node_as_content:page');
     $group_b->addMember($this->getCurrentUser());
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Members can delete their own grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Members can delete their own published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Members can delete their own unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'delete'), 'Members cannot delete published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'delete'), 'Members cannot delete unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($account);
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Members can delete their own grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'Members can delete their own published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_4, 'delete'), 'Members can delete their own unpublished grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'delete'), 'Members cannot delete published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'delete'), 'Members cannot delete unpublished grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'delete'), 'The ungrouped node can be deleted.');
   }
 
   /**
@@ -881,33 +911,43 @@ class EntityAccessComplexTest extends GroupKernelTestBase {
   public function testNonMemberDeleteOwnAccess() {
     $account = $this->createUser([], $this->permissions);
     $node_1 = $this->createNode(['type' => 'page']);
-    $node_2 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
-    $node_3 = $this->createNode(['type' => 'page']);
+    $node_2 = $this->createNode(['type' => 'page', 'status' => 0]);
+    $node_3 = $this->createNode(['type' => 'page', 'uid' => $account->id()]);
+    $node_4 = $this->createNode(['type' => 'page', 'uid' => $account->id(), 'status' => 0]);
+    $node_5 = $this->createNode(['type' => 'page']);
 
     $this->groupTypeA->getOutsiderRole()->grantPermission('delete own node_as_content:page entity')->save();
     $this->groupTypeB->getOutsiderRole()->grantPermission('delete own node_as_content:page entity')->save();
 
     $group_a = $this->createGroup(['type' => $this->groupTypeA->id()]);
     $group_a->addContent($node_1, 'node_as_content:page');
+    $group_a->addContent($node_2, 'node_as_content:page');
     $group_a->addMember($account);
 
     $group_b = $this->createGroup(['type' => $this->groupTypeB->id()]);
-    $group_b->addContent($node_2, 'node_as_content:page');
+    $group_b->addContent($node_3, 'node_as_content:page');
+    $group_b->addContent($node_4, 'node_as_content:page');
     $group_b->addMember($account);
 
-    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Non-members can delete their own grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Non-members cannot delete grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
+    $this->assertTrue($this->accessControlHandler->access($node_1, 'delete'), 'Non-members can delete their own published grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_2, 'delete'), 'Non-members can delete their own unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'delete'), 'Non-members cannot delete published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'delete'), 'Non-members cannot delete unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($this->createUser([], $this->permissions));
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Non-members cannot delete grouped nodes they do not own.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Non-members cannot delete grouped nodes they do not own.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Non-members cannot delete published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Non-members cannot delete unpublished grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'delete'), 'Non-members cannot delete published grouped nodes they do not own.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'delete'), 'Non-members cannot delete unpublished grouped nodes they do not own.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'delete'), 'The ungrouped node can be deleted.');
 
     $this->setCurrentUser($account);
-    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete grouped nodes.');
-    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete grouped nodes.');
-    $this->assertTrue($this->accessControlHandler->access($node_3, 'delete'), 'The ungrouped node can be deleted.');
+    $this->assertFalse($this->accessControlHandler->access($node_1, 'delete'), 'Members cannot delete published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_2, 'delete'), 'Members cannot delete unpublished grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_3, 'delete'), 'Members cannot delete published grouped nodes.');
+    $this->assertFalse($this->accessControlHandler->access($node_4, 'delete'), 'Members cannot delete unpublished grouped nodes.');
+    $this->assertTrue($this->accessControlHandler->access($node_5, 'delete'), 'The ungrouped node can be deleted.');
   }
 
   /**
