<?php

use Drupal\Core\Url;
use Drupal\views\Views;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * Implements hook_page_attachments().
 * @param $page
 */
function admin_toolbar_content_page_attachments(&$page) {
  $page['#attached']['library'][] = 'admin_toolbar_content/global';
}

/**
 * Implements hook_module_implements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function admin_toolbar_content_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_links_discovered_alter') {
    $settings = $implementations['admin_toolbar_content'];
    unset($implementations['admin_toolbar_content']);
    $implementations['admin_toolbar_content'] = $settings;
  }
}

/**
 * Implements hook_menu_links_discovered_alter();
 *
 * Alters the 'content' menu by:
 * - Adding a content type collection menu item if available.
 * - Adding a 'content type' specific menu item to the main 'content' menu item OR to the collection menu item.
 * - Moving the vocabularies out of "structure" and adding it as 'Categories' in the admin toolbar.
 *
 * @see \Drupal\admin_toolbar_content\Controller\NodeController
 * @see \Drupal\admin_toolbar_content\Plugin\Derivative\NodeMenuLinkDerivative
 *
 * @param array $links
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function admin_toolbar_content_menu_links_discovered_alter(array &$links) {
  $moduleHandler = \Drupal::moduleHandler();
  $entityTypeManager = \Drupal::entityTypeManager();

  if ($moduleHandler->moduleExists('node')) {
    $content_type_collections = \Drupal::service('module_handler')->invokeAll('content_type_collections');
    $contentTypes = $entityTypeManager->getStorage('node_type')->loadMultiple();
    $default_content_types = [];
    foreach ($contentTypes as $contentType) {
      $default_content_types[$contentType->id()] = $contentType->label();
    }

    foreach ($content_type_collections as $collection => $content_types) {
      foreach ($content_types['content_types'] as $content_type) {

        // Move the add node to the new parent.
        if (isset($links['admin_toolbar_tools.extra_links:node.add.' . $content_type])) {
          unset($default_content_types[$content_type]);
          $links['admin_toolbar_tools.extra_links:node.add.' . $content_type]['parent'] = 'admin_toolbar_content.admin_content:' . $collection . '.' . $content_type;
          $links['admin_toolbar_tools.extra_links:node.add.' . $content_type]['title'] = (string) t('Add');
        }

        // Remove unwanted local tasks stuff that was set by admin toolbar menu.
        foreach ([
                   'view.files.page_1',
                   'view.scheduler_scheduled_content.overview'
                 ] as $id) {
          if (isset($links['admin_toolbar_content.admin_content:' . $collection . '_' . $id])) {
            unset($links['admin_toolbar_content.admin_content:' . $collection . '_' . $id]);
          }
          if (isset($links['admin_toolbar_content.admin_content:' . $collection . '.' . $content_type . '_' . $id])) {
            unset($links['admin_toolbar_content.admin_content:' . $collection . '.' . $content_type . '_' . $id]);
          }
        }
      }
    }

    $collection = 'content';
    foreach ($default_content_types as $content_type => $label) {
      if (isset($links['admin_toolbar_tools.extra_links:node.add.' . $content_type])) {
        $links['admin_toolbar_tools.extra_links:node.add.' . $content_type]['parent'] = 'admin_toolbar_content.admin_content:' . $collection . '.' . $content_type;
        $links['admin_toolbar_tools.extra_links:node.add.' . $content_type]['title'] = (string) t('Add');
      }
      // Remove unwanted local tasks stuff that was set by admin toolbar menu.
      foreach ([
                 'view.files.page_1',
                 'view.scheduler_scheduled_content.overview'
               ] as $id) {
        if (isset($links['admin_toolbar_content.admin_content:' . $collection . '.' . $content_type . '_' . $id])) {
          unset($links['admin_toolbar_content.admin_content:' . $collection . '.' . $content_type . '_' . $id]);
        }
      }
    }

    // Remove the main add content menu item.
    unset($links['admin_toolbar_tools.extra_links:node.add']);
  }

  if ($moduleHandler->moduleExists('taxonomy')) {
    // Create a categories item in the main menu.
    $links['admin_toolbar_content.categories'] = $links['entity.taxonomy_vocabulary.collection'];
    $links['admin_toolbar_content.categories']['parent'] = 'system.admin';
    $links['admin_toolbar_content.categories']['weight'] = -9;
    $links['admin_toolbar_content.categories']['title'] = (string) t('Categories');

    // Add a list terms for each vocabulary.
    $vocabularies = $entityTypeManager->getStorage('taxonomy_vocabulary')->loadMultiple();
    foreach ($vocabularies as $id => $vocabulary) {
      if (isset($links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id])) {

        if (isset($links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.edit_form.' . $id])) {
          // Move the "edit vocabulary" item to its parent's parent.
          $links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.edit_form.' . $id]['parent'] = $links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id]['parent'];
          $links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.edit_form.' . $id]['title'] = $links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id]['title'];

          // Move all other items to the "edit" item or unset them if we don't have permission.
          foreach ($links as $index => &$link) {
            if (isset($link['parent']) && $link['parent'] == 'admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id) {
              $link['parent'] = 'admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.edit_form.' . $id;
            }
          }
        }

        // Add a "Add term" to the "vocabulary" item only if the user has create permission.
        $links['admin_toolbar_content.categories.' . $id . '.add'] = [
          'title' => t('Add term'),
          'route_name' => 'entity.taxonomy_term.add_form',
          'route_parameters' => ['taxonomy_vocabulary' => $id],
          'menu_name' => $links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id]['menu_name'],
          'parent' => 'admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id,
        ];

        // Move "vocabulary" item to "categories"
        $links['admin_toolbar_tools.extra_links:entity.taxonomy_vocabulary.overview_form.' . $id]['parent'] = 'admin_toolbar_content.categories';
      }
    }
  }

  if ($moduleHandler->moduleExists('media')) {
    $mediaTypes = $entityTypeManager->getStorage('media_type')->loadMultiple();
    foreach($mediaTypes as $id => $mediaType) {
      if (isset($links['media.add.' . $id])) {

        // Create a media type landing overview page.
        $links['admin_toolbar_tools.media_page.' . $id] = $links['admin_toolbar_tools.media_page'];
        $links['admin_toolbar_tools.media_page.' . $id]['title'] = $links['media.add.' . $id]['title'];
        $links['admin_toolbar_tools.media_page.' . $id]['parent'] = 'admin_toolbar_tools.media_page';
        $links['admin_toolbar_tools.media_page.' . $id]['route_parameters'] = [
          'type' => $id
        ];

        // Move the add media type link to the overview page.
        $links['media.add.' . $id]['title'] = (string) t('Add');
        $links['media.add.' . $id]['parent'] = 'admin_toolbar_tools.media_page.' . $id;
      }
    }

    // Remove the main add media menu item.
    unset($links['admin_toolbar_tools.add_media']);
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 * Hides links from admin menu, if user doesn't have access rights.
 *
 * @param $variables
 */
function admin_toolbar_content_preprocess_menu(&$variables) {
  if (empty($variables['items'])) {
    /**
     * Additional empty check to prevent exotic situations, where the preprocess
     * function is entered even without items.
     * @see https://www.drupal.org/node/2833885
     */
    return;
  }
  // Ensure that menu_name exists.
  if (!isset($variables['menu_name'])) {
    // In rare cases (for unknown reasons) menu_name may not be set.
    // As fallback, we can fetch it from the first menu item.
    $first_link = reset($variables['items']);
    /** @var Drupal\Core\Menu\MenuLinkDefault $original_link */
    // Fetch the menu_name from the original link.
    $original_link = $first_link['original_link'];
    $variables['menu_name'] = $original_link->getMenuName();
  }
  if ($variables['menu_name'] == 'admin') {
    admin_toolbar_content_preprocess_menu_helper($variables['items']);
  }
}

function admin_toolbar_content_preprocess_menu_helper(array &$items) {
  foreach ($items as $route => &$item) {
    if (!admin_toolbar_content_preprocess_menu_helper_access_check($route, $item)) {
      unset($items[$route]);
    }
    else {
      if (!empty($items[$route]['below'])) {
        // Recursively call this function for the child items.
        admin_toolbar_content_preprocess_menu_helper($items[$route]['below']);
      }
      if (empty($items[$route]['below'])) {
        /*
         * Every child item has been cleared out.
         * Now check, if the given route represents an overview page only,
         * without having functionality on its own. In this case, we can safely
         * unset this item, as there aren't any children left.
         */
        if (admin_toolbar_content_is_overview_page($route)) {
          unset($items[$route]);
        }
        else {
          // Let's remove the expanded flag.
          $items[$route]['is_expanded'] = FALSE;
        }
      }
    }
  }
}

function admin_toolbar_content_preprocess_menu_helper_access_check($route, $item) {

  $has_access = true;

  $user = \Drupal::currentUser();

  $route_name = $route;
  $route_params = [];
  if (!empty($item['original_link'])) {
    /** @var \Drupal\Core\Menu\MenuLinkBase $original_link */
    $original_link = $item['original_link'];
    $route_name = $original_link->getRouteName();
    $route_params = $original_link->getRouteParameters();
  }

  switch ($route_name) {
    case 'entity.taxonomy_vocabulary.overview_form':
      if (isset($route_params['taxonomy_vocabulary'])) {
        $has_access = (
          $user->hasPermission('administer taxonomy')
          ||
          $user->hasPermission('edit terms in ' . $route_params['taxonomy_vocabulary'])
          ||
          $user->hasPermission('create terms in ' . $route_params['taxonomy_vocabulary'])
          ||
          $user->hasPermission('add terms in ' . $route_params['taxonomy_vocabulary'])
        );
      }

      break;

    case 'system.admin_content':
      if (isset($route_params['type'])) {
        // Only allow if user has any of the edit rights.
        $has_access = (
          $user->hasPermission('bypass node access')
          ||
          $user->hasPermission('create ' . $route_params['type'] . ' content')
          ||
          $user->hasPermission('delete any ' . $route_params['type'] . ' content')
          ||
          $user->hasPermission('delete own ' . $route_params['type'] . ' content')
          ||
          $user->hasPermission('delete ' . $route_params['type'] . ' revisions')
          ||
          $user->hasPermission('edit any ' . $route_params['type'] . ' content')
          ||
          $user->hasPermission('edit own ' . $route_params['type'] . ' content')
          ||
          $user->hasPermission('revert ' . $route_params['type'] . ' revisions')
          ||
          $user->hasPermission('view ' . $route_params['type'] . ' revisions')
        );
      }

      break;
  }

  return $has_access;
}

/**
 * Checks, if the given route name matches a pure (admin) overview page that can
 * be skipped, if there are no child items set. The typical example are routes
 * having the SystemController::systemAdminMenuBlockPage() function as their
 * controller callback set.
 *
 * @param string $route_name
 *   The route name to check.
 *
 * @return bool
 *   TRUE, if the given route name matches a pure admin overview page route,
 *   FALSE otherwise.
 */
function admin_toolbar_content_is_overview_page($route_name) {
  /** @var \Drupal\Core\Routing\RouteProviderInterface $route_provider */
  $route_provider = \Drupal::service('router.route_provider');
  $overview_page_controllers = [
    '\Drupal\system\Controller\AdminController::index',
    '\Drupal\system\Controller\SystemController::overview',
    '\Drupal\system\Controller\SystemController::systemAdminMenuBlockPage',
  ];
  try {
    $route = $route_provider->getRouteByName($route_name);
    $controller = $route->getDefault('_controller');
    $entity_list = $route->getDefault('_entity_list');

    return
      // If we don't have a controller, but we are viewing an entity list,
      // and the type of entities usually have a menu item per bundle under them
      // consider it to be an overview page. Example is the taxonomy vocabulary page.
      (empty($controller) && $entity_list  == 'taxonomy_vocabulary')
      ||
      // If we have a controller it must match any of the overview classes.
      (!empty($controller) && in_array($controller, $overview_page_controllers))
      ;
  }
  catch (RouteNotFoundException $ex) { }
  return FALSE;
}

/**
 * Implements hook_preprocess_menu_local_action().
 *
 * Alters the 'Add new content' button to a specific 'Add new <content type>' button.
 *
 * @param $variables
 */
function admin_toolbar_content_preprocess_menu_local_action(&$variables) {

  $type = \Drupal::request()->get('type');
  /** @var \Drupal\Core\Url $url */
  $url = $variables['element']['#link']['url'];
  $route = $url->getRouteName();
  $cache = false;

  switch($route) {
    case 'node.add_page':
      $route_name = 'node.add';
      $entity_type_id = 'node_type';
      $cache = true;
      break;
    case 'entity.media.add_page':
      $route_name = 'entity.media.add_form';
      $entity_type_id = 'media_type';
      $cache = true;
      break;
    default:
      return;
  }

  if ($type) {
    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
    $storage = \Drupal::service('entity.manager')->getStorage($entity_type_id);
    $url = Url::fromRoute($route_name, [$entity_type_id => $type]);
    $contentType = $storage->load($type);
    if ($contentType) {
      $label = t('Add @entity-type', ['@entity-type' => $contentType->label()]);
      $variables['element']['#link']['title'] = $label;
      $variables['element']['#link']['url'] = $url;
      $variables['link']['#title'] = $label;
      $variables['link']['#url'] = $url;
    }
  }

  if ($cache) {
    $variables['element']['#cache']['contexts'][] = 'url.query_args:type';
    $variables['link']['#cache']['contexts'][] = 'url.query_args:type';
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Changes the title if a type filter is added to the admin content page.
 *
 * @param $variables
 */
function admin_toolbar_content_preprocess_block(&$variables) {
  if ('page_title_block' == $variables['plugin_id']) {
    $request = \Drupal::request();
    $path = $request->getRequestUri(); // get current path
    if(strpos($path, 'admin/content')) { //check current path is user profile page

      $content_type = $request->get('type');

      if ($content_type) {

        /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
        $storage = \Drupal::service('entity.manager')->getStorage('node_type');
        $contentType = $storage->load($content_type);

        if ($contentType) {
          $variables['content']['#title']['#markup'] = $variables['content']['#title']['#markup']. " - " . $contentType->label();
        }
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @see admin_toolbar_content_views_pre_render_callback()
 *
 * @param $types
 */
function admin_toolbar_content_element_info_alter(&$types) {
  array_unshift($types['view']['#pre_render'], 'admin_toolbar_content_views_pre_render_callback');
}

/**
 * Implements the callback for hook_element_info_alter().
 *
 * If a 'content_<content_type>' view is provided, use that in stead of the normal 'content' view.
 *
 * @param $element
 *
 * @return mixed
 */
function admin_toolbar_content_views_pre_render_callback($element) {
  // Allow specific Views displays to explicitly perform pre-rendering, for
  // those displays that need to be able to know the fully built render array.
  if (!empty($element['#pre_rendered'])) {
    return $element;
  }

  if ($element['#name'] == 'content') {

    $content_type = \Drupal::request()->get('type');

    $view = Views::getView('content_' . $content_type);
    if (is_object($view)) {
      $element['#name'] = 'content_' . $content_type;
      $element['#view_id'] = $element['#name'];

      // Update the contextual links if enabled.
      if (isset($element['#contextual_links']['entity.view.edit_form'])) {
        $element['#contextual_links']['entity.view.edit_form']['route_parameters']['view'] = $element['#view_id'];
        $element['#contextual_links']['entity.view.edit_form']['metadata']['name'] = $element['#view_id'];
      }
    }
  }

  return $element;
}
