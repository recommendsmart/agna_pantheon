{#
/**
 * @file
 * Default theme implementation to display a product.
 *
 * Available variables:
 * - product: The product entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - product.getCreatedTime() will return the product creation timestamp.
 *   - product.hasField('field_example') returns TRUE if the product bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - product.isPublished() will return whether the product is published or not.
 *   Calling other methods, such as product.delete(), will result in an exception.
 *   See \Drupal\arch_product\Entity\Product for a full list of public properties and
 *   methods for the product object.
 * - label: The title of the product.
 * - content: All product items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The product author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this product.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current product.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - product: The current template type (also known as a "theming hook").
 *   - product--type-[type]: The current product type. For example, if the product is an
 *     "Article" it would result in "product--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - product--view-mode-[view_mode]: The View Mode of the product; for example, a
 *     teaser would result in: "product--view-mode-teaser", and
 *     full: "product--view-mode-full".
 *   The following are controlled through the product publishing options.
 *   - product--promoted: Appears on product promoted to the front page.
 *   - product--sticky: Appears on product ordered above other non-sticky products in
 *     teaser listings.
 *   - product--unpublished: Appears on unpublished product visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the product tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   product cannot hold the main description content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_product()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'product',
    'product--type-' ~ product.bundle|clean_class,
    view_mode ? 'product--view-mode-' ~ view_mode|clean_class,
  ]
%}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  <div{{ content_attributes }}>
    {{ content }}
  </div>

</article>
