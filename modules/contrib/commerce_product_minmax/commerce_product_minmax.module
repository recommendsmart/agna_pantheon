<?php

/**
 * @file
 * Commerce Product MinMax module functions.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_form_BASE_FORM_alter().
 */
function commerce_product_minmax_form_commerce_order_item_add_to_cart_form_alter(&$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'commerce_product_minmax_quantity_validate';
}

/**
 * Form validation handler to ensure quantity is within the correct range.
 */
function commerce_product_minmax_quantity_validate($form, FormStateInterface $form_state) {
  $quantity = $form_state->getValue('quantity')[0]['value'];
  $variation_id = $form_state->getValue('purchased_entity')[0]['variation'];
  $variation = ProductVariation::load($variation_id);
  $product = $variation->getProduct();
  $field = $product->get('commerce_product_minmax_range')->first();

  if ($field) {
    $quantity_range = $field->first()->getValue();

    if ($quantity < $quantity_range['from']) {
      $form_state->setErrorByName('quantity',
        t('Minimum quantity of this product is @min', ['@min' => $quantity_range['from']]));
    }
    elseif ($quantity > $quantity_range['to']) {
      $form_state->setErrorByName('quantity',
        t('Maximum quantity of this product is @max', ['@max' => $quantity_range['to']]));
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function commerce_product_minmax_entity_insert(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'commerce_product_type') {
    $type = $entity->id();
    $field_storage = FieldStorageConfig::loadByName('commerce_product', 'commerce_product_minmax_range');
    $field = FieldConfig::loadByName('commerce_product', $type, 'commerce_product_minmax_range');

    if (empty($field)) {
      $field = FieldConfig::create([
        'field_storage' => $field_storage,
        'bundle' => $type,
        'label' => t('Quantity Min/Max'),
      ]);
      $field->save();

      entity_get_form_display('commerce_product', $type, 'default')
        ->setComponent('commerce_product_minmax_range', [
          'type' => 'range',
        ])
        ->save();
    }
  }
}
