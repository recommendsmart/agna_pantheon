<?php

/**
 * @file
 * Contains group_roles_management.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Access\GroupAccessResult;

/**
 * Implements hook_help().
 */
function group_roles_management_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the group_roles_management module.
    case 'help.page.group_roles_management':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allows to set permissions to manage members of specific role.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_access().
 */
function group_roles_management_group_content_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getContentPlugin()->getPluginId() == 'group_membership') {
    $group = $entity->getGroup();
    if ($group->hasPermission('administer members', $account)) {
      switch ($operation) {
        case 'update':
        case 'delete':
          foreach ($entity->group_roles as $role) {
            if ($group->hasPermission("manage members with role {$role->target_id}", $account)) {
              return AccessResult::allowed();
            }
          }
          break;
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_presave().
 */
function group_roles_management_group_content_presave(EntityInterface $entity) {
  if ($entity->getContentPlugin()->getPluginId() !== 'group_membership') {
    return;
  }

  if ($entity->isNew()) {
    return;
  }

  $user = \Drupal::currentUser();
  /** @var \Drupal\group\Entity\GroupInterface $group */
  $group = $entity->getGroup();

  $original_roles = [];
  $updated_roles = [];
  $roles = $group->getGroupType()->getRoles(FALSE);

  foreach ($entity->original->group_roles as $role) {
    $original_roles[] = $role->target_id;
  }
  foreach ($entity->group_roles as $role) {
    $updated_roles[] = $role->target_id;
  }

  $result = [];
  foreach ($roles as $role_id => $role) {
    if ($group->hasPermission("manage members with role {$role_id}", $user)) {
      if (in_array($role_id, $updated_roles)) {
        $result[] = [
          'target_id' => $role_id
        ];
      }
    }
    else {
      if (in_array($role_id, $original_roles)) {
        $result[] = [
          'target_id' => $role_id
        ];
      }
    }
  }
  $entity->set('group_roles', $result);

}
